@using KOICommunicationPlatform.Models.ViewModels
@model KOICommunicationPlatform.Models.ViewModels.SprintViewModel

@{
    ViewData["Title"] = "Student Task Tracking";
}
<br />
<h2>Student Task Tracking</h2>
<br />
<!-- Button to trigger modal for adding a Sprint -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addSprintModal" disabled>
    Add Sprint
</button>
<br />
<!-- Modal for Adding a Sprint -->
<div class="modal fade" id="addSprintModal" tabindex="-1" role="dialog" aria-labelledby="addSprintModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <form asp-action="AddSprint" method="post">
                <div class="modal-header">
                    <h5 class="modal-title" id="addSprintModalLabel">Add Sprint</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="studentGroupHDId" value="@Model.StudentGroupHDId" />
                    <input type="hidden" name="Id" value="@Model.Id" />

                    <div class="form-group">
                        <label for="sprintName">Sprint Name</label>
                        <input type="text" class="form-control" id="sprintName" name="sprintName" required />
                    </div>

                    <div class="form-group">
                        <label for="startDate">Start Date</label>
                        <input type="datetime-local" class="form-control" id="startDate" name="startDate" required />
                    </div>

                    <div class="form-group">
                        <label for="endDate">End Date</label>
                        <input type="datetime-local" class="form-control" id="endDate" name="endDate" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </form>
        </div>
    </div>
</div>
<br />
<!-- List existing sprints with checkboxes and Add Task Board button -->
@if (Model.ExistingSprints != null && Model.ExistingSprints.Any())
{
    <h3>Existing Sprints</h3>
    <form>
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-hover">
                <thead class="thead">
                    <tr style=" background-color: #236799;">
                        <th style="color:white;font-weight:bold;text-align:center;">Select</th>
                        <th style="color:white;font-weight:bold;text-align:center;">Sprint Id</th>
                        <th style="color:white;font-weight:bold;text-align:center;">Sprint Name</th>
                        <th style="color:white;font-weight:bold;text-align:center;">Start Date</th>
                        <th style="color:white;font-weight:bold;text-align:center;">End Date</th>
                        <th style="color:white;font-weight:bold;text-align:center;">Created By</th>
                        <th style="color:white;font-weight:bold;text-align:center;">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var sprint in Model.ExistingSprints)
                    {
                        <tr>
                            <td>
                                <input type="radio" name="selectedSprint" value="@sprint.Id"
                                @(Model.ExistingSprints.First().Id == sprint.Id ? "checked" : "")
                                       onchange="sendSprintIdToServer(this.value)" />
                            </td>
                            <td>@sprint.Id</td>
                            <td>@sprint.SprintName</td>
                            <td>@sprint.StartDate.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>@sprint.EndDate.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>@sprint.CreatedBy</td>
                            <td>
                                <button type="button" class="btn btn float-right" onclick="confirmDelete(@sprint.Id)" style="background-color:maroon;color:white;font-weight:bold" disabled>Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </form>
}
else
{
    <p>No existing sprints found.</p>
}

<!-- Task Board Section (Initially hidden) -->
<section class="content task-board-section" style="display: none;">
    <div class="container-fluid" id="tasksContainer">
        <div class="row">
            <div class="col-md-12">
                <div class="card card">
                    <div class="card-header">
                        <button type="button" class="btn btn-primary float-right" data-toggle="modal" data-target="#createTaskModal" style="background-color:green;border-color:green" disabled> + Create Task</button>
                    </div>
                    <div class="lanes card-body">
                        <div class="row">
                            <!-- Backlog Lane -->
                            <div class="col-sm-3">
                                <div class="swim-lane card card-row card-secondary" id="backlog-lane">
                                    <div class="card-header bg-warning">
                                        <h3 class="card-title" style="color:#FFFFFF">Backlog</h3>
                                    </div>
                                    <div class="card-body" draggable="true">
                                        <!-- Dynamically adding tasks to Backlog Lane -->
                                        @if (Model.GroupedTasks.ContainsKey("Backlog"))
                                        {
                                            foreach (var task in Model.GroupedTasks["Backlog"])
                                            {
                                                <div class="card card-warning card-outline">
                                                    <div class="card-header">
                                                        <h5 class="card-title" style="color:black;font-weight:bold">@task.TaskName</h5>
                                                        <div class="card-tools">
                                                            <button type="button" class="btn btn-primary btn-sm ml-2" onclick="openCommentModal(@task.Id)">
                                                                <i class="fas fa-comment"></i>
                                                                <!-- Initialize with 0 -->
                                                                <span id="commentCount_@task.Id" style="display:inline;">0</span>
                                                            </button>
                                                            <button type="button" class="btn btn-primary btn-sm ml-2" onclick="openDeleteTask(@task.Id)" disabled>
                                                                <i class="fa-solid fa-trash"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                    <div class="card-body">
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Task Start Date: </p>
                                                            <p>@task.StartDate.ToString("dd/MMM/yyyy hh:mmtt")</p>
                                                        </div>
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Task End Date: </p>
                                                            <p>@task.EndDate.ToString("dd/MMM/yyyy hh:mmtt")</p>
                                                        </div>
                                                        <p style="color:black;font-weight:bold; margin-right:5px">Description:</p>
                                                        <p>@task.Description</p>
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Priority:</p>
                                                            <p style="color:@(task.Priority == "High" ? "red" : task.Priority == "Medium" ? "orange" : "green"); font-weight:bold">
                                                                @task.Priority.Substring(0, 1)
                                                            </p>
                                                        </div>
                                                        <p style="color:black;font-weight:bold; margin-right:5px">Allocated Student Details:</p>
                                                        <ul>
                                                            @foreach (var student in Model.AssignedStudents.GetValueOrDefault(task.Id, new List<StudentGroupViewModel>()))
                                                            {
                                                                <li>@student.GivenName @student.Surname - @student.StudentId</li>
                                                            }
                                                        </ul>
                                                        <div class="row">
                                                            <div class="col-sm-6">
                                                                <div class="form-group">
                                                                    <div class="custom-control custom-checkbox">
                                                                        <input class="custom-control-input" type="checkbox" id="customCheckbox1" checked="">
                                                                        @* <label for="customCheckbox1" class="custom-control-label">@task.AssignmentCode</label> *@
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="col-sm-6">
                                                                <div class="row no-print">
                                                                    <div class="col-12">
                                                                        <button type="button" class="btn btn float-right" style="background-color:#29f30d87;color:black;font-weight:bold" onclick="editTask('@task.Id', '@task.SprintId')" disabled> Edit</button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>

                            </div>
                            <!-- To Do Lane -->
                            <div class="col-sm-3">
                                <div class="swim-lane card card-row card-danger" id="todo-lane">
                                    <div class="card-header">
                                        <h3 class="card-title" style="color:#FFFFFF">ToDo</h3>
                                    </div>
                                    <div class="card-body" draggable="true">
                                        <!-- Dynamically adding tasks to Backlog Lane -->
                                        @if (Model.GroupedTasks.ContainsKey("ToDo"))
                                        {
                                            foreach (var task in Model.GroupedTasks["ToDo"])
                                            {
                                                <div class="card card-warning card-outline">
                                                    <div class="card-header">
                                                        <h5 class="card-title" style="color:black;font-weight:bold">@task.TaskName</h5>
                                                        <div class="card-tools">
                                                            <button type="button" class="btn btn-primary btn-sm ml-2" onclick="openCommentModal(@task.Id)">
                                                                <span id="commentCount_@task.Id" style="display:inline;">0</span>
                                                            </button>
                                                            <button type="button" class="btn btn-primary btn-sm ml-2" onclick="openDeleteTask(@task.Id)" disabled>
                                                                <i class="fa-solid fa-trash"></i>
                                                            </button>

                                                        </div>
                                                    </div>
                                                    <div class="card-body">
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Task Start Date: </p>
                                                            <p>@task.StartDate.ToString("dd/MMM/yyyy hh:mmtt")</p>
                                                        </div>
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Task End Date: </p>
                                                            <p>@task.EndDate.ToString("dd/MMM/yyyy hh:mmtt")</p>
                                                        </div>
                                                        <p style="color:black;font-weight:bold; margin-right:5px">Description:</p>
                                                        <p>@task.Description</p>
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Priority:</p>
                                                            <p style="color:@(task.Priority == "High" ? "red" : task.Priority == "Medium" ? "orange" : "green"); font-weight:bold">
                                                                @task.Priority.Substring(0, 1)
                                                            </p>
                                                        </div>
                                                        <p style="color:black;font-weight:bold; margin-right:5px">Allocated Student Details:</p>
                                                        <ul>
                                                            @foreach (var student in Model.AssignedStudents.GetValueOrDefault(task.Id, new List<StudentGroupViewModel>()))
                                                            {
                                                                <li>@student.GivenName @student.Surname - @student.StudentId</li>
                                                            }
                                                        </ul>
                                                        <div class="row">
                                                            <div class="col-sm-6">
                                                                <div class="form-group">
                                                                    <div class="custom-control custom-checkbox">
                                                                        <input class="custom-control-input" type="checkbox" id="customCheckbox1" checked="">
                                                                        @* <label for="customCheckbox1" class="custom-control-label">@task.AssignmentCode</label> *@
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="col-sm-6">
                                                                <div class="row no-print">
                                                                    <div class="col-12">
                                                                        <button type="button" class="btn btn float-right" style="background-color:#29f30d87;color:black;font-weight:bold" onclick="editTask('@task.Id', '@task.SprintId')" disabled> Edit</button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                            <!-- In Progress Lane -->
                            <div class="col-sm-3">
                                <div class="swim-lane card card-row card-default" id="inprogress-lane">
                                    <div class="card-header bg-info">
                                        <h3 class="card-title">InProgress</h3>
                                    </div>
                                    <div class="card-body" draggable="true">
                                        <!-- Dynamically adding tasks to Backlog Lane -->
                                        @if (Model.GroupedTasks.ContainsKey("InProgress"))
                                        {
                                            foreach (var task in Model.GroupedTasks["InProgress"])
                                            {
                                                <div class="card card-warning card-outline">
                                                    <div class="card-header">
                                                        <h5 class="card-title" style="color:black;font-weight:bold">@task.TaskName</h5>
                                                        <div class="card-tools">
                                                            <button type="button" class="btn btn-primary btn-sm ml-2" onclick="openCommentModal(@task.Id)">
                                                                <span id="commentCount_@task.Id" style="display:inline;">0</span>
                                                            </button>
                                                            <button type="button" class="btn btn-primary btn-sm ml-2" onclick="openDeleteTask(@task.Id)" disabled>
                                                                <i class="fa-solid fa-trash"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                    <div class="card-body">
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Task Start Date: </p>
                                                            <p>@task.StartDate.ToString("dd/MMM/yyyy hh:mmtt")</p>
                                                        </div>
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Task End Date: </p>
                                                            <p>@task.EndDate.ToString("dd/MMM/yyyy hh:mmtt")</p>
                                                        </div>
                                                        <p style="color:black;font-weight:bold; margin-right:5px">Description:</p>
                                                        <p>@task.Description</p>
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Priority:</p>
                                                            <p style="color:@(task.Priority == "High" ? "red" : task.Priority == "Medium" ? "orange" : "green"); font-weight:bold">
                                                                @task.Priority.Substring(0, 1)
                                                            </p>
                                                        </div>
                                                        <p style="color:black;font-weight:bold; margin-right:5px">Allocated Student Details:</p>
                                                        <ul>
                                                            @foreach (var student in Model.AssignedStudents.GetValueOrDefault(task.Id, new List<StudentGroupViewModel>()))
                                                            {
                                                                <li>@student.GivenName @student.Surname - @student.StudentId</li>
                                                            }
                                                        </ul>
                                                        <div class="row">
                                                            <div class="col-sm-6">
                                                                <div class="form-group">
                                                                    <div class="custom-control custom-checkbox">
                                                                        <input class="custom-control-input" type="checkbox" id="customCheckbox1" checked="">
                                                                        @* <label for="customCheckbox1" class="custom-control-label">@task.AssignmentCode</label> *@
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="col-sm-6">
                                                                <div class="row no-print">
                                                                    <div class="col-12">
                                                                        <button type="button" class="btn btn float-right" style="background-color:#29f30d87;color:black;font-weight:bold" onclick="editTask('@task.Id', '@task.SprintId')" disabled> Edit</button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                            <!-- Done Lane -->
                            <div class="col-sm-3">
                                <div class="swim-lane card card-row card-success" id="done-lane">
                                    <div class="card-header">
                                        <h3 class="card-title">Done</h3>
                                    </div>
                                    <div class="card-body" draggable="true">
                                        <!-- Dynamically adding tasks to Backlog Lane -->
                                        @if (Model.GroupedTasks.ContainsKey("Done"))
                                        {
                                            foreach (var task in Model.GroupedTasks["Done"])
                                            {
                                                <div class="card card-warning card-outline">
                                                    <div class="card-header">
                                                        <h5 class="card-title" style="color:black;font-weight:bold">@task.TaskName</h5>
                                                        <div class="card-tools">
                                                            <button type="button" class="btn btn-primary btn-sm ml-2" onclick="openCommentModal(@task.Id)">
                                                                <span id="commentCount_@task.Id" style="display:inline;">0</span>
                                                            </button>
                                                            <button type="button" class="btn btn-primary btn-sm ml-2" onclick="openDeleteTask(@task.Id)" disabled>
                                                                <i class="fa-solid fa-trash"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                    <div class="card-body">
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Task Start Date: </p>
                                                            <p>@task.StartDate.ToString("dd/MMM/yyyy hh:mmtt")</p>
                                                        </div>
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Task End Date: </p>
                                                            <p>@task.EndDate.ToString("dd/MMM/yyyy hh:mmtt")</p>
                                                        </div>
                                                        <p style="color:black;font-weight:bold; margin-right:5px">Description:</p>
                                                        <p>@task.Description</p>
                                                        <div style="display:flex; align-items:center">
                                                            <p style="color:black;font-weight:bold; margin-right:5px">Priority:</p>
                                                            <p style="color:@(task.Priority == "High" ? "red" : task.Priority == "Medium" ? "orange" : "green"); font-weight:bold">
                                                                @task.Priority.Substring(0, 1)
                                                            </p>
                                                        </div>
                                                        <p style="color:black;font-weight:bold; margin-right:5px">Allocated Student Details:</p>
                                                        <ul>
                                                            @foreach (var student in Model.AssignedStudents.GetValueOrDefault(task.Id, new List<StudentGroupViewModel>()))
                                                            {
                                                                <li>@student.GivenName @student.Surname - @student.StudentId</li>
                                                            }
                                                        </ul>
                                                        <div class="row">
                                                            <div class="col-sm-6">
                                                                <div class="form-group">
                                                                    <div class="custom-control custom-checkbox">
                                                                        <input class="custom-control-input" type="checkbox" id="customCheckbox1" checked="">
                                                                        @* <label for="customCheckbox1" class="custom-control-label">@task.AssignmentCode</label> *@
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="col-sm-6">
                                                                <div class="row no-print">
                                                                    <div class="col-12">
                                                                        <button type="button" class="btn btn float-right" style="background-color:#29f30d87;color:black;font-weight:bold" onclick="editTask('@task.Id', '@task.SprintId')" disabled> Edit</button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal for Creating a Task -->
    <div class="modal fade" id="createTaskModal" tabindex="-1" role="dialog" aria-labelledby="createTaskModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                @* <form asp-action="CreateTask" method="post" onsubmit="setSelectedSprintId()"> *@
                @using (Html.BeginForm("CreateTask", "ClientTaskView", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    <div class="modal-header">
                        <h5 class="modal-title" id="createTaskModalLabel">Create Task</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <input type="hidden" id="taskSprintId" name="SprintId" value="" />

                        <input type="hidden" name="StudentGroupHDId" value="@Model.StudentGroupHDId" />

                        <!-- Students Table -->
                        <h5>Select Students to Assign Task</h5>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Select</th>
                                    <th>Id</th>
                                    <th>Student ID</th>
                                    <th>Given Name</th>
                                    <th>Surname</th>
                                    <th>Email</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var student in Model.GroupStudents)
                                {
                                    <tr>
                                        <td>
                                            <input type="checkbox" name="SelectedStudentIds" value="@student.Id" />
                                        </td>
                                        <td>@student.Id</td>
                                        <td>@student.StudentId</td>
                                        <td>@student.GivenName</td>
                                        <td>@student.Surname</td>
                                        <td>@student.Email</td>
                                    </tr>
                                }
                            </tbody>
                        </table>

                        <!-- Status Dropdown -->
                        <div class="form-group">
                            <label for="selectedStatus">Status</label>
                            <select class="form-control" id="selectedStatus" name="SelectedStatus" required>
                                <option value="">-- Select Status --</option>
                                @foreach (var status in Model.StatusOptions)
                                {
                                    if (Model.SelectedStatus == status.Value)
                                    {
                                        <option value="@status.Value" selected>@status.Text</option>
                                    }
                                    else
                                    {
                                        <option value="@status.Value">@status.Text</option>
                                    }
                                }
                            </select>
                        </div>
                        <!-- Task Name Text  -->
                        <div class="form-group">
                            <label for="taskName">Task Name</label>
                            <input type="text" class="form-control" id="taskName" name="taskName" required value="@Model.TaskName" />
                        </div>
                        <!-- Description Text Area -->
                        <div class="form-group">
                            <label for="taskDescription">Description</label>
                            <textarea class="form-control" id="taskDescription" name="TaskDescription" rows="3" required>@Model.TaskDescription</textarea>
                        </div>

                        <!-- Priority Checkboxes -->
                        <div class="form-group">
                            <label>Priority</label><br />
                            @foreach (var priority in Model.PriorityOptions)
                            {
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="SelectedPriority" id="priority_@priority.Value" value="@priority.Value" @(Model.SelectedPriority == priority.Value ? "checked" : "") required>
                                    <label class="form-check-label" for="priority_@priority.Value">@priority.Text</label>
                                </div>
                            }
                        </div>

                        <!-- Start Date and End Date Pickers -->
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                <label for="taskStartDate">Start Date</label>
                                <input type="datetime-local" class="form-control" id="taskStartDate" name="TaskStartDate" value="@(Model.TaskStartDate != default ? Model.TaskStartDate.ToString("yyyy-MM-ddTHH:mm") : "")" required />
                            </div>
                            <div class="form-group col-md-6">
                                <label for="taskEndDate">End Date</label>
                                <input type="datetime-local" class="form-control" id="taskEndDate" name="TaskEndDate" value="@(Model.TaskEndDate != default ? Model.TaskEndDate.ToString("yyyy-MM-ddTHH:mm") : "")" required />
                            </div>
                        </div>

                        <!-- Display Validation Errors -->
                        <div>
                            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                            {
                                <div class="text-danger">@error.ErrorMessage</div>
                            }
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Clear</button>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                    @* </form> *@
                    <input type="hidden" id="selectedSprintId" name="SelectedSprintId" value="" />

                }
            </div>
        </div>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="commentModal" tabindex="-1" role="dialog" aria-labelledby="commentModalLabel" aria-hidden="true">
        <div class="modal-dialog custom-modal-size" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="commentModalLabel">Comments</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="newComment">Add New Comment</label>
                        <textarea class="form-control" id="newComment" rows="3"></textarea>
                    </div>
                    <button type="button" class="btn btn-success" onclick="addComment()">Add Comment</button>

                    <hr />

                    <h5>Previous Comments</h5>
                    <div id="previousComments">
                        <!-- Previous comments will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            //alert(document.getElementById('selectedSprintId').value);
            let selectedSprintId = null;

            // Function to show the task board based on sprint ID
            function showTaskBoard(sprintId) {
                selectedSprintId = sprintId;
                document.querySelector('#selectedSprintId').value = selectedSprintId;

                // Show the task board section
                document.querySelector('.task-board-section').style.display = 'block';
            }

            // Automatically select the first radio button and show the task board if sprints exist
            const firstRadio = document.querySelector('input[name="selectedSprint"]');
            if (firstRadio) {
                firstRadio.checked = true;
                showTaskBoard(firstRadio.value);
            }

            // Handle radio button changes
            document.querySelectorAll('input[name="selectedSprint"]').forEach(function (radio) {
                radio.addEventListener('change', function () {
                    if (this.checked) {
                        showTaskBoard(this.value);
                    }
                });
            });
        });



        var currentTaskId;

        function openCommentModal(taskId) {
            currentTaskId = taskId; // Make sure this is set correctly
            $('#newComment').val(''); // Clear the textarea
            loadPreviousComments(taskId); // Load previous comments
            $('#commentModal').modal('show'); // Show the modal
        }


        function loadPreviousComments(taskId) {
            $.ajax({
                url: '@Url.Action("GetComments", "ClientTaskView")', // Adjust the controller name and action as needed
                type: 'GET',
                data: { taskId: taskId },
                success: function (response) {
                    var commentsHtml = '';
                    response.forEach(function (comment) {
                        commentsHtml += '<div class="comment">';
                        commentsHtml += '<p><strong>' + comment.createdBy + ':</strong> ' + comment.comment + '</p>';
                        commentsHtml += '<p><small>' + comment.createdDateTime + '</small></p>';
                        commentsHtml += '</div>';
                        commentsHtml += '<hr />';
                    });
                    $('#previousComments').html(commentsHtml);
                    // Update the comment count
                    var commentCount = response.length;
                    $('#commentCount_' + taskId).text(commentCount);  // Update the specific
                },
                error: function () {
                    alert('Failed to load comments.');
                }
            });
        }

        function addComment() {
            var commentText = $('#newComment').val();
            if (commentText.trim() === '') {
                alert('Comment cannot be empty.');
                return;
            }

            $.ajax({
                url: '@Url.Action("AddComment", "ClientTaskView")',
                type: 'POST',
                data: { taskId: currentTaskId, content: commentText },
                success: function () {
                    $('#newComment').val(''); // Clear the textarea
                    loadPreviousComments(currentTaskId); // Reload comments
                },
                error: function () {
                    alert('Failed to add the comment.');
                }
            });
        }


        function sendSprintIdToServer(sprintId) {
            $.ajax({
                url: '@Url.Action("GetSprintTasks", "ClientTaskView")', // Adjust to your actual action method and controller
                type: 'GET',
                data: { sprintId: sprintId },
                success: function (data) {
                    $('#tasksContainer').html(data); // Update the UI with the returned partial view HTML
                },
                error: function (error) {
                    console.error("Error sending Sprint ID:", error);
                    alert('Error retrieving tasks. Please try again.');
                }
            });
        }

        // Function to update the hidden SprintId field
        function updateHiddenSprintId() {
            var selectedSprintId = $('#sprintSelect').val();
            $('#hiddenSprintId').val(selectedSprintId);
        }

    </script>
}