@model KOICommunicationPlatform.Models.ViewModels.ProjectTimelineViewModel
@using System.IO  <!-- Add this directive to use Path methods -->

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Upload Documents- Client View</h1>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#">Document Share</a></li>
                    <li class="breadcrumb-item active">Upload Documents</li>
                </ol>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f6f9;
        color: #333;
    }

    /* Custom Modal Size */
    .custom-modal-size {
        max-width: 80%; /* Adjust the percentage as needed */
        width: 800px; /* Adjust the width as needed */
    }

    .modal-dialog {
        margin: 1.75rem auto; /* Optional: Adjust modal margin */
    }

    .timeline {
        position: relative;
        padding: 1rem;
        list-style-type: none;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .timeline-item {
        position: relative;
        padding: 1.5rem 0;
        border-bottom: 1px solid #ddd;
    }

        .timeline-item:last-child {
            border-bottom: none;
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: -1rem;
            width: 0.5rem;
            height: 100%;
            background: linear-gradient(to bottom, #2EC0CD, #F36D38, #25628F);
            border-radius: 0.25rem;
        }

    .timeline-item-content {
        padding-left: 2rem;
    }

        .timeline-item-content h5 {
            margin: 0;
            font-size: 1.5rem;
            color: #25628F;
        }

        .timeline-item-content p {
            margin: 0.5rem 0;
            color: #666;
        }

    .documents {
        margin-top: 1.5rem;
    }

    table.document-table {
        width: 100%;
        margin-top: 1rem;
        border-collapse: collapse;
    }

        table.document-table th, table.document-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        table.document-table th {
            color: #25628F;
            text-transform: uppercase;
        }

        table.document-table td a {
            color: #25628F;
            text-decoration: none;
        }

            table.document-table td a:hover {
                text-decoration: underline;
            }

    .btn-sm {
        padding: .25rem .5rem;
        font-size: 0.875rem;
    }

    .btn-success {
        color: #fff;
        background-color: #218838;
        border-color: #218838;
        box-shadow: none;
    }

    .btn-danger {
        background-color: #F36D38;
        border-color: #F36D38;
    }

    .btn-primary {
        background-color: #25628F;
        border-color: #25628F;
    }

        .btn-primary:hover, .btn-danger:hover {
            opacity: 0.9;
        }

    .form-group label {
        font-weight: bold;
        color: #25628F;
    }

    .form-control {
        border: 1px solid #ddd;
        border-radius: 4px;
        box-shadow: none;
        padding: 8px;
    }

        .form-control:focus {
            border-color: #2EC0CD;
            box-shadow: 0 0 5px rgba(46, 192, 205, 0.5);
        }
</style>
<body>
    <h1>@ViewData["Title"]</h1>
    <ul class="timeline">
        @foreach (var deliverable in Model.Deliverables)
        {
            <li class="timeline-item">
                <div class="timeline-item-content">
                    <div style="display: flex; align-items: center;">
                        <h5 style="margin-right: 20px;">@deliverable.DeliverableName</h5>
                        <p style="margin-right: 20px;"><strong>Start Date:</strong> @deliverable.StartDate.ToString("yyyy-MM-dd HH:mm")</p>
                        <p><strong>End Date:</strong> @deliverable.EndDate.ToString("yyyy-MM-dd HH:mm")</p>
                    </div>

                    <div class="documents">
                        <!-- Form to upload the file -->
                        <form method="post">
                            @if (Model.Documents.Where(d => d.ProjectDeliverableId == deliverable.Id).Any())
                            {
                                <table class="document-table">
                                    <thead>
                                        <tr>
                                            <th>File Name</th>
                                            <th>Uploaded By</th>
                                            <th>Uploaded On</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var document in Model.Documents.Where(d => d.ProjectDeliverableId == deliverable.Id))
                                        {
                                            var fileName = System.IO.Path.GetFileName(document.Version);
                                            var filePath = document.Version;

                                            <tr>
                                                <td>
                                                    <a href="@Url.Action("DownloadFile", "StudentDocumentUpload", new { filePath = filePath, fileName = fileName })" title="@fileName" download>
                                                        @fileName
                                                    </a>
                                                </td>
                                                <td>@document.FullName</td>
                                                <td>@document.CreatedDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                                <td>
                                                    <button type="button" class="btn btn-primary btn-sm ml-2" onclick="openCommentModal(@document.Id)">
                                                        <i class="fas fa-comment"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        </form>
                    </div>
                </div>
            </li>
        }
    </ul>

    <!-- Modal -->
    <div class="modal fade" id="commentModal" tabindex="-1" role="dialog" aria-labelledby="commentModalLabel" aria-hidden="true">
        <div class="modal-dialog custom-modal-size" role="document">
            <!-- Added custom-modal-size class -->
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="commentModalLabel">Comments</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="newComment">Add New Comment</label>
                        <textarea class="form-control" id="newComment" rows="3"></textarea>
                    </div>
                    <button type="button" class="btn btn-success" onclick="addComment()">Add Comment</button>

                    <hr />

                    <h5>Previous Comments</h5>
                    <div id="previousComments">
                        <!-- Previous comments will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        var currentDocumentId;

        function openCommentModal(documentId) {
            currentDocumentId = documentId;
            $('#newComment').val(''); // Clear the textarea
            loadPreviousComments(documentId); // Load previous comments
            $('#commentModal').modal('show'); // Show the modal
        }

        function loadPreviousComments(documentId) {
            $.ajax({
                url: '@Url.Action("GetComments", "ClientDocumentUpload")', // Adjust the controller name and action as needed
                type: 'GET',
                data: { documentId: documentId },
                success: function (response) {
                    var commentsHtml = '';
                    response.forEach(function (comment) {
                        commentsHtml += '<div class="comment">';
                        commentsHtml += '<p><strong>' + comment.createdBy + ':</strong> ' + comment.comment + '</p>';
                        commentsHtml += '<p><small>' + comment.createdDateTime + '</small></p>';
                        commentsHtml += '</div>';
                        commentsHtml += '<hr />';
                    });
                    $('#previousComments').html(commentsHtml);
                },
                error: function () {
                    alert('Failed to load comments.');
                }
            });
        }

        function addComment() {
            var commentText = $('#newComment').val();
            if (commentText.trim() === '') {
                alert('Comment cannot be empty.');
                return;
            }

            $.ajax({
                url: '@Url.Action("AddComment", "ClientDocumentUpload")', // Adjust the controller name and action as needed
                type: 'POST',
                data: { documentId: currentDocumentId, content: commentText },
                success: function () {
                    $('#newComment').val(''); // Clear the textarea
                    loadPreviousComments(currentDocumentId); // Reload comments
                },
                error: function () {
                    alert('Failed to add the comment.');
                }
            });
        }
    </script>
</body>
